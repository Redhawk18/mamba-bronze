import os
from pathlib import Path
import re

from fontTools import ttLib
from num2words import num2words


class Icon:
    def __init__(self, name: str, index: str, icon: str) -> None:
        self.name: str = name
        self.index: str = index
        self.icon: str = icon

    def __lt__(self, other):
        return self.name < other.name


def json_to_rust(name: str) -> str:
    new_name = ""
    # digit
    for c in name:
        if c.isdigit():
            new_name += num2words(c)

        else:
            new_name += c

    # capitalize
    words = re.split(r" |-|_|#|!|\(|\)", new_name)
    for i, word in enumerate(words):
        words[i] = word.capitalize()

    new_name = "".join(map(str, words))

    return new_name


def get_path() -> Path:
    while True:
        path: Path = Path(input("Enter the path to the TTF file: "))

        # Check if the path is valid and the file exists
        if path.is_file() and path.suffix.lower() == ".ttf":
            return path

        else:
            print("Invalid path or file not found. Please enter a valid TTF file path.")


def get_struct_name() -> str:
    while True:
        name = input("Enter the struct name: ").strip()

        # Check if the name is a non-empty string
        if name:
            return name

        else:
            print("Invalid struct name. Please enter a non-empty name.")


def get_filename() -> str:
    while True:
        filename = input("Enter filename: ").strip()

        if filename:
            return filename

        else:
            print("Invalid name. Please enter a non-empty name.")


path: Path = get_path()
struct_name: str = get_struct_name()
filename: str = get_filename()

prefix: str = ""
suffix: str = ""
if os.path.exists("./prefix.txt"):
    with open("./prefix.txt", "r") as file:
        prefix = file.read()

if os.path.exists("./suffix.txt"):
    with open("./suffix.txt", "r") as file:
        suffix = file.read()

# header and enum
output = f"""\
//! This file was generated by Mamba Bronze
//! https://github.com/Redhawk18/mamba-bronze
{prefix}
/// Holds all glyphs of the {struct_name} font
#[derive(Debug, Clone, Copy)]
pub enum {struct_name} {{"""

icons = {}

# parse font
with ttLib.TTFont(path) as font:
    for x in font["cmap"].tables:
        for id, name in x.cmap.items():
            icon_name = json_to_rust(name)
            if icon_name == ".null":
                continue

            icons[icon_name] = Icon(icon_name, id, chr(id))

for icon in sorted(icons):
    output += f"""\
    /// {icons[icon].name} {icons[icon].icon}
    {icons[icon].name},
"""

# icon function
output += f"""\
}}

/// Converts an [`{struct_name}`] into a [`core::char`]
#[must_use]
pub const fn icon_to_char(icon: {struct_name}) -> char {{
    match icon {{
"""

for icon in sorted(icons):
    output += f"        {struct_name}::{icons[icon].name} => '\\u{{{icons[icon].index:x}}}',\n"

output += f"""\
    }}
}}

/// Converts an [`{struct_name}`] into a [`std::string::String`]
#[must_use]
pub fn icon_to_string(icon: {struct_name}) -> String {{
    icon_to_char(icon).to_string()
}}
{suffix}"""

with open(filename, "w") as file:
    file.write(output)
