from fontTools import ttLib
from num2words import num2words


class Icon:
    def __init__(self, name: str, index: str, icon: str) -> None:
        self.name: str = name
        self.index: str = index
        self.icon: str = icon

    def __lt__(self, other):
        return self.name < other.name


def json_to_rust(name: str) -> str:
    new_name = ""
    # digit
    for c in name:
        if c.isdigit():
            new_name += num2words(c)

        else:
            new_name += c

    # capitalize
    words = new_name.split("-")
    for i, word in enumerate(words):
        words[i] = word.capitalize()

    new_name = "".join(map(str, words))

    return new_name


print("Give the struct name of the icon font")
struct_name = "BootstrapIcons"  # input()

# header and enum
output = (
    f"""\
// This file was generated by Mamba Bronze
// https://github.com/Redhawk18/mamba-bronze

/// Holds all glyphs of the {struct_name} font
#[derive(Debug, Clone, Copy)]
pub enum {struct_name}"""
    + """{
    """
)


icons = {}

# parse font
with ttLib.TTFont("./bootstrap-icons.ttf") as font:
    for x in font["cmap"].tables:
        for id, name in x.cmap.items():
            icon_name = json_to_rust(name)
            if icon_name == ".null":
                continue

            icons[icon_name] = Icon(icon_name, id, chr(id))

for icon in sorted(icons):
    output += f"""\t/// {icons[icon].name} {icons[icon].icon}
        {icons[icon].name},
    """

# icon function
output += f"""}}

/// Converts an icon into a char
#[must_use]
pub const fn icon_to_char(icon: {struct_name}) -> char {{
    match icon {{
"""

for icon in sorted(icons):
    output += (
        f"\t\t{struct_name}::{icons[icon].name} => '\\u{{{icons[icon].index:x}}}',\n"
    )

output += f"""\
    }}
}}

pub const fn icon_to_string(icon: {struct_name}) -> String {{
    icon_to_char(icon).to_string()
}}
"""

with open("bootstrap.rs", "w") as file:
    file.write(output)
